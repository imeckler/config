" vim: ft=vim

" make Y behave like C or D
nnoremap Y y$

" enter is useless in normal mode, saving is awesome
nnoremap <cr> :w<cr>

" space is also useless in normal mode, : is awesome
nnoremap <space> :

"" space is also useless in visual mode, : is awesome
vnoremap <space> :

" ex-mode is weird, remap Q
nnoremap Q q

" helpful remap for a normal slip of the fingers in dvorak
nnoremap q: :q

" , is a way easier leader than \
let maplocalleader = ",,"
let mapleader = ","

" Window management
" this function in conjunction with the leader maps below will either move to
" the window in the direction indicated, or will open a new window in that
" direction and will move to it.
function! WinMove(key)
  let t:curwin = winnr()
  exec "wincmd ".a:key
  if (t:curwin == winnr()) " failed to move
    if (match(a:key, '[eu]'))
      wincmd v
    else
      wincmd s
    endif
    exec "wincmd ".a:key
  endif
endfunction

map <localleader>n :call WinMove('n')<cr>
map <localleader>u :call WinMove('u')<cr>
map <localleader>i :call WinMove('i')<cr>
map <localleader>e :call WinMove('e')<cr>

" Assumes that ocp-indent is in PATH.
" This can be overriden by setting g:ocp_indent_binary in your .vimrc. Eg.
"
" let g:ocp_indent_binary = "/home/jo/bin/ocp-indent.exe"
"

function! PreserveExec(expr)
  let l:pos = getpos(".")
  let l:winview = winsaveview()
  try
    execute(a:expr)
  finally
    call setpos(".", l:pos)
    call winrestview(l:winview)
  endtry
endfunction

function! OcpIndentRange() range
  let l:ocp_indent_binary = exists("g:ocp_indent_binary") ? g:ocp_indent_binary : "ocp-indent"
  call PreserveExec(':%!' . l:ocp_indent_binary . ' -l ' . a:firstline . '-' . a:lastline)
endfunction

function! OcpIndentBuffer()
  let l:ocp_indent_binary = exists("g:ocp_indent_binary") ? g:ocp_indent_binary : "ocp-indent"
  call PreserveExec(':%!' . l:ocp_indent_binary)
endfunction


vnoremap <LocalLeader>i :call OcpIndentRange()<CR>
nnoremap <LocalLeader>i :call OcpIndentBuffer()<CR>
map == :call OcpIndentRange()<CR>
vnoremap = :call OcpIndentRange()<CR>
